/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}": types.CustomColorDocument,
    "query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}": types.FooterDocument,
    "query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    sections {\n      ... on HeroSectionRecord {\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        additionalImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        socialLabel\n        socials {\n          id\n          name\n          url\n          icon {\n            url\n          }\n        }\n        featuredCollections {\n          id\n          name\n        }\n      }\n      ... on DividerSectionRecord {\n        id\n        _modelApiKey\n        title\n        subtitle\n        preTitle\n        button {\n          label\n          slug\n        }\n      }\n      ... on TestimonialSectionRecord {\n        id\n        _modelApiKey\n        title\n        testimonial {\n          id\n          testimonial\n          author\n        }\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        pretitle\n        direction\n        button {\n          label\n          slug\n          id\n        }\n        collection {\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n        description\n      }\n      ... on MaterialShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        subDescription\n        description\n        materials {\n          id\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.HomeDocument,
    "query InitialParams($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allCollections(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allBrands(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allMaterials(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.InitialParamsDocument,
    "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}": types.LegalDocument,
    "query Locales {\n  _site {\n    locales\n  }\n}": types.LocalesDocument,
    "query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.MenuDocument,
    "query Meta($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site(locale: $locale, fallbackLocales: $fallbackLocale) {\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n}": types.MetaDocument,
    "query Product($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  product(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    name\n    price\n    sale\n    salePrice\n    reviewAverage\n    numberOfReviews\n    featuredReviews {\n      id\n      reviewerName\n      reviewDate\n      reviewScore\n      review\n    }\n    material {\n      id\n      name\n      slug\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    description {\n      value\n      blocks {\n        ... on ProductFeatureSectionRecord {\n          id\n          _modelApiKey\n          material\n          occasions\n          style\n          weather\n        }\n        ... on FeaturedQuestionsSectionRecord {\n          id\n          questions {\n            id\n            _modelApiKey\n            question\n            answer\n          }\n          _modelApiKey\n        }\n      }\n    }\n    id\n    productImages {\n      id\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    brand {\n      name\n      id\n    }\n    productVariations {\n      id\n      color {\n        hex\n      }\n      availableSizes\n    }\n    relatedProducts {\n      id\n      name\n      price\n      sale\n      salePrice\n      slug\n      brand {\n        name\n      }\n      productImages {\n        id\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    weather\n    style\n    size\n    shippingText\n    secondaryButton\n    sale\n    reviews\n    reviewButton\n    primaryButton\n    priceUndertext\n    occasions\n    more\n    materials\n    color\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.ProductDocument,
    "query Products($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType, $orderBy: [ProductModelOrderBy], $collections: [ItemId], $brands: [ItemId], $materials: [ItemId], $nameSearch: String!) {\n  allProducts(\n    first: 12\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n    orderBy: $orderBy\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}, AND: {name: {matches: {pattern: $nameSearch}}}}}}\n  ) {\n    id\n    slug\n    sale\n    salePrice\n    productImages {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    price\n    name\n    brand {\n      name\n    }\n  }\n  _allProductsMeta(\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}}}}\n  ) {\n    count\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    sale\n    newArrivals\n    mostPopular\n    topRated\n    price\n    sales\n    collection\n    material\n    brand\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.ProductsDocument,
    "query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}": types.ShowcaseDocument,
    "query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}": types.StoresDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"): (typeof documents)["query CustomColor {\n  layout {\n    mainColor {\n      red\n      blue\n      green\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}"): (typeof documents)["query Footer($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    copyrightText\n    socialMediaLinks {\n      id\n      name\n      url\n      icon {\n        url\n      }\n    }\n    footerSubtitle\n    footerTitle\n    footerLogo {\n      responsiveImage {\n        src\n      }\n    }\n    footerColumns {\n      id\n      label\n      footerItem {\n        id\n        label\n        slug\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    newsletter\n    subscribeToOurNewsletter\n    newsletterButton\n    emailPlaceholder\n    displayNewsletterFooter\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    sections {\n      ... on HeroSectionRecord {\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        additionalImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        socialLabel\n        socials {\n          id\n          name\n          url\n          icon {\n            url\n          }\n        }\n        featuredCollections {\n          id\n          name\n        }\n      }\n      ... on DividerSectionRecord {\n        id\n        _modelApiKey\n        title\n        subtitle\n        preTitle\n        button {\n          label\n          slug\n        }\n      }\n      ... on TestimonialSectionRecord {\n        id\n        _modelApiKey\n        title\n        testimonial {\n          id\n          testimonial\n          author\n        }\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        pretitle\n        direction\n        button {\n          label\n          slug\n          id\n        }\n        collection {\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n        description\n      }\n      ... on MaterialShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        subDescription\n        description\n        materials {\n          id\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Home($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  home(locale: $locale, fallbackLocales: $fallbackLocale) {\n    sections {\n      ... on HeroSectionRecord {\n        _modelApiKey\n        id\n        heroSubtitle\n        heroTitle\n        heroImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        additionalImage {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n        socialLabel\n        socials {\n          id\n          name\n          url\n          icon {\n            url\n          }\n        }\n        featuredCollections {\n          id\n          name\n        }\n      }\n      ... on DividerSectionRecord {\n        id\n        _modelApiKey\n        title\n        subtitle\n        preTitle\n        button {\n          label\n          slug\n        }\n      }\n      ... on TestimonialSectionRecord {\n        id\n        _modelApiKey\n        title\n        testimonial {\n          id\n          testimonial\n          author\n        }\n      }\n      ... on CollectionCardShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        pretitle\n        direction\n        button {\n          label\n          slug\n          id\n        }\n        collection {\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n        description\n      }\n      ... on MaterialShowcaseSectionRecord {\n        id\n        _modelApiKey\n        title\n        subDescription\n        description\n        materials {\n          id\n          name\n          slug\n          details {\n            image {\n              responsiveImage {\n                ...DatoImage_responsiveImage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query InitialParams($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allCollections(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allBrands(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allMaterials(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query InitialParams($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allCollections(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allBrands(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n  allMaterials(first: \"100\", locale: $locale, fallbackLocales: $fallbackLocale) {\n    id\n    name\n    _modelApiKey\n    details {\n      image {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n      subtitle\n      description {\n        value\n      }\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}"): (typeof documents)["query Legal($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  legalPage(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    content {\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Locales {\n  _site {\n    locales\n  }\n}"): (typeof documents)["query Locales {\n  _site {\n    locales\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Menu($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  layout(locale: $locale, fallbackLocales: $fallbackLocale) {\n    cookieNotice {\n      primaryButtonLabel\n      secondaryButtonLabel\n      subheader\n      header\n      cookieNoticeImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    popup {\n      title\n      underText\n      subtitle\n      preTitle\n      dismissButtonLabel\n      button {\n        label\n        slug\n      }\n      popupImage {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n    logo {\n      url\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    notification {\n      value\n    }\n    menu {\n      ... on DropdownMenuRecord {\n        id\n        label\n        _modelApiKey\n        column {\n          label\n          id\n          item {\n            ... on ProductRecord {\n              slug\n              _modelApiKey\n              id\n              name\n            }\n            ... on MaterialRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on CollectionRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n            ... on BrandRecord {\n              slug\n              id\n              _modelApiKey\n              name\n            }\n          }\n        }\n        trending {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n        newArrival {\n          ... on MaterialRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on CollectionRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n          ... on BrandRecord {\n            id\n            name\n            slug\n            _modelApiKey\n            details {\n              image {\n                responsiveImage {\n                  ...DatoImage_responsiveImage\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on LinkItemRecord {\n        id\n        label\n        slug\n        _modelApiKey\n      }\n    }\n  }\n  _site {\n    locales\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    trending\n    new\n    shopNow\n    searchPlaceholder\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Meta($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site(locale: $locale, fallbackLocales: $fallbackLocale) {\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n}"): (typeof documents)["query Meta($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  _site(locale: $locale, fallbackLocales: $fallbackLocale) {\n    globalSeo {\n      fallbackSeo {\n        title\n        description\n      }\n    }\n    favicon {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Product($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  product(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    name\n    price\n    sale\n    salePrice\n    reviewAverage\n    numberOfReviews\n    featuredReviews {\n      id\n      reviewerName\n      reviewDate\n      reviewScore\n      review\n    }\n    material {\n      id\n      name\n      slug\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    description {\n      value\n      blocks {\n        ... on ProductFeatureSectionRecord {\n          id\n          _modelApiKey\n          material\n          occasions\n          style\n          weather\n        }\n        ... on FeaturedQuestionsSectionRecord {\n          id\n          questions {\n            id\n            _modelApiKey\n            question\n            answer\n          }\n          _modelApiKey\n        }\n      }\n    }\n    id\n    productImages {\n      id\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    brand {\n      name\n      id\n    }\n    productVariations {\n      id\n      color {\n        hex\n      }\n      availableSizes\n    }\n    relatedProducts {\n      id\n      name\n      price\n      sale\n      salePrice\n      slug\n      brand {\n        name\n      }\n      productImages {\n        id\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    weather\n    style\n    size\n    shippingText\n    secondaryButton\n    sale\n    reviews\n    reviewButton\n    primaryButton\n    priceUndertext\n    occasions\n    more\n    materials\n    color\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Product($slug: String, $locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  product(\n    filter: {slug: {eq: $slug}}\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n  ) {\n    name\n    price\n    sale\n    salePrice\n    reviewAverage\n    numberOfReviews\n    featuredReviews {\n      id\n      reviewerName\n      reviewDate\n      reviewScore\n      review\n    }\n    material {\n      id\n      name\n      slug\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    description {\n      value\n      blocks {\n        ... on ProductFeatureSectionRecord {\n          id\n          _modelApiKey\n          material\n          occasions\n          style\n          weather\n        }\n        ... on FeaturedQuestionsSectionRecord {\n          id\n          questions {\n            id\n            _modelApiKey\n            question\n            answer\n          }\n          _modelApiKey\n        }\n      }\n    }\n    id\n    productImages {\n      id\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    brand {\n      name\n      id\n    }\n    productVariations {\n      id\n      color {\n        hex\n      }\n      availableSizes\n    }\n    relatedProducts {\n      id\n      name\n      price\n      sale\n      salePrice\n      slug\n      brand {\n        name\n      }\n      productImages {\n        id\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    weather\n    style\n    size\n    shippingText\n    secondaryButton\n    sale\n    reviews\n    reviewButton\n    primaryButton\n    priceUndertext\n    occasions\n    more\n    materials\n    color\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Products($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType, $orderBy: [ProductModelOrderBy], $collections: [ItemId], $brands: [ItemId], $materials: [ItemId], $nameSearch: String!) {\n  allProducts(\n    first: 12\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n    orderBy: $orderBy\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}, AND: {name: {matches: {pattern: $nameSearch}}}}}}\n  ) {\n    id\n    slug\n    sale\n    salePrice\n    productImages {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    price\n    name\n    brand {\n      name\n    }\n  }\n  _allProductsMeta(\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}}}}\n  ) {\n    count\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    sale\n    newArrivals\n    mostPopular\n    topRated\n    price\n    sales\n    collection\n    material\n    brand\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Products($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $skip: IntType, $orderBy: [ProductModelOrderBy], $collections: [ItemId], $brands: [ItemId], $materials: [ItemId], $nameSearch: String!) {\n  allProducts(\n    first: 12\n    locale: $locale\n    fallbackLocales: $fallbackLocale\n    skip: $skip\n    orderBy: $orderBy\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}, AND: {name: {matches: {pattern: $nameSearch}}}}}}\n  ) {\n    id\n    slug\n    sale\n    salePrice\n    productImages {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    price\n    name\n    brand {\n      name\n    }\n  }\n  _allProductsMeta(\n    filter: {collections: {anyIn: $collections}, AND: {brand: {in: $brands}, AND: {material: {in: $materials}}}}\n  ) {\n    count\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n    sale\n    newArrivals\n    mostPopular\n    topRated\n    price\n    sales\n    collection\n    material\n    brand\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"): (typeof documents)["query Showcase($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    currencySymbol\n  }\n  showcase(locale: $locale, fallbackLocales: $fallbackLocale) {\n    title\n    newProductsTitle\n    newProducts {\n      id\n      slug\n      sale\n      salePrice\n      name\n      productImages {\n        responsiveImage {\n          ...DatoImage_responsiveImage\n        }\n        copyright\n      }\n      price\n    }\n    materialsTitle\n    materialsDisplay {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    materialsDescription\n    description\n    displays {\n      responsiveImage {\n        ...DatoImage_responsiveImage\n      }\n    }\n    cta {\n      id\n      label\n      slug\n    }\n    collections {\n      name\n      slug\n      id\n      details {\n        image {\n          responsiveImage {\n            ...DatoImage_responsiveImage\n          }\n        }\n      }\n    }\n    collectionsCta {\n      label\n      slug\n      id\n    }\n  }\n}\n\nfragment DatoImage_responsiveImage on ResponsiveImage {\n  src\n  srcSet\n  base64\n  width\n  height\n  alt\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}"): (typeof documents)["query Stores($locale: SiteLocale, $fallbackLocale: [SiteLocale!]) {\n  allStores(locale: $locale, fallbackLocales: $fallbackLocale) {\n    country\n    id\n    storeDescription\n    storeName\n    storeLocation {\n      latitude\n      longitude\n    }\n    storeImage {\n      responsiveImage {\n        src\n      }\n    }\n  }\n  generalInterface(locale: $locale, fallbackLocales: $fallbackLocale) {\n    findOnMaps\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;